--- support/kconfig/confdata.c
+++ support/kconfig/confdata.c
@@ -17,6 +17,38 @@
 
 #include "lkc.h"
 
+// rename does not work across devices, e.g. docker bind mounts,
+// so fallback to copy and delete if rename fails
+bool rename_copy(const char *old, const char *new) {
+	int ret = 0;
+	if (!rename(old, new)) {
+		return ret;
+	}
+ 
+	FILE *source = fopen(old, "r");
+	if( source == NULL ) {
+		ret = 1;
+	}
+
+	FILE *target = fopen(new, "w");
+	if( target == NULL ) {
+		ret = 1;
+	}
+
+	char ch;
+	while( (ch = fgetc(source) ) != EOF )
+		fputc(ch, target);
+
+	if (remove(old)) {
+		ret = 1;
+	}
+
+	fclose(source);
+	fclose(target);
+
+	return ret;
+};
+
 struct conf_printer {
 	void (*print_symbol)(FILE *, struct symbol *, const char *, void *);
 	void (*print_comment)(FILE *, const char *, void *);
@@ -828,8 +859,8 @@ next:
 	if (*tmpname) {
 		strcat(dirname, basename);
 		strcat(dirname, ".old");
-		rename(newname, dirname);
-		if (rename(tmpname, newname))
+		rename_copy(newname, dirname);
+		if (rename_copy(tmpname, newname))
 			return 1;
 	}
 
@@ -1038,13 +1069,13 @@ int conf_write_autoconf(void)
 	if (!name)
 		name = "include/generated/autoconf.h";
 	sprintf(buf, "%s.tmpconfig.h", dir);
-	if (rename(buf, name))
+	if (rename_copy(buf, name))
 		return 1;
 	name = getenv("KCONFIG_TRISTATE");
 	if (!name)
 		name = "include/config/tristate.conf";
 	sprintf(buf, "%s.tmpconfig_tristate", dir);
-	if (rename(buf, name))
+	if (rename_copy(buf, name))
 		return 1;
 	name = conf_get_autoconfig_name();
 	/*
@@ -1052,7 +1083,7 @@ int conf_write_autoconf(void)
 	 * and this marks the successful completion of the previous steps.
 	 */
 	sprintf(buf, "%s.tmpconfig", dir);
-	if (rename(buf, name))
+	if (rename_copy(buf, name))
 		return 1;
 
 	return 0;
